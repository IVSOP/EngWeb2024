var http = require('http')
var fs = require('fs')
var url = require('url')
var axios = require('axios')
const { parse } = require('querystring');

function collectRequestBodyData(request, callback) {
    if(request.headers['content-type'] === 'application/x-www-form-urlencoded') {
        let body = '';
        request.on('data', chunk => {
            body += chunk.toString();
        });
        request.on('end', () => {
            callback(parse(body));
        });
    }
    else {
        callback(null);
    }
}

function compositoresCreate() {
    pagHTML = `
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8"/>
        <title>Criar compositor</title>
        <link rel="stylesheet" href="/w3.css"/>
		<link rel="stylesheet" href="/custom.css"/>
    </head>
    <body>
        <div class="w3-card-4">

            <header class="w3-container w3-teal">
              <h1>Criar compositor</h1>
            </header>
            
            <form method="post" action="/compositores/create" class="w3-container w3-card-4">
				<br>
				<p>
					<label class="w3-text-grey">Nome</label>
					<input class="w3-input w3-border" type="text" required name="nome">
				</p>
				<p>
					<label class="w3-text-grey">Id</label>
					<input class="w3-input w3-border" type="text" required name="id">
				</p>
				<p>
					<label class="w3-text-grey">Bio</label>
					<textarea class="w3-input w3-border" name="message" rows="4" cols="50" required name="bio"></textarea>
				</p>
				<p>
					<label class="w3-text-grey">Data de nascimento</label>
					<br>
					<input class="w3-border" type="date" required name="dataNasc">
				</p>
				<p>
					<label class="w3-text-grey">Data de obito</label>
					<br>
					<input class="w3-border" type="date" required name="dataObito">
				</p>
				<p>
					<label class="w3-text-grey">ID do periodo</label>
					<input class="w3-input w3-border" type="number" required name="periodo">
				</p>

				<p>
					<button type="submit" class="w3-btn w3-padding w3-teal" style="width:120px">Send &nbsp; ‚ùØ</button>
				</p>

			</form>
            
            <footer class="w3-container w3-teal">
              <h5>Generated by EngWeb2024::TPC4</h5>
            </footer>
            
        </div>
    </body>
</html>`
    return pagHTML
}

function periodosCreate() {
    pagHTML = `
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8"/>
        <title>Criar periodo</title>
        <link rel="stylesheet" href="/w3.css"/>
		<link rel="stylesheet" href="/custom.css"/>
    </head>
    <body>
        <div class="w3-card-4">

            <header class="w3-container w3-teal">
              <h1>Criar periodo</h1>
            </header>
            
            <form method="post" action="/periodos/create" class="w3-container w3-card-4">
				<br>
				<p>
					<label class="w3-text-grey">Nome</label>
					<input class="w3-input w3-border" type="text" required name="nome">
				</p>
				<p>
					<label class="w3-text-grey">Id</label>
					<input class="w3-input w3-border" type="text" required name="id">
				</p>
				<p>
					<button type="submit" class="w3-btn w3-padding w3-teal" style="width:120px">Send &nbsp; ‚ùØ</button>
				</p>
			</form>
            
            <footer class="w3-container w3-teal">
              <h5>Generated by EngWeb2024::TPC4</h5>
            </footer>
            
        </div>
    </body>
</html>`
    return pagHTML
}

function compositoresIndex(compositores) {
    pagHTML = `
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8"/>
        <title>Lista de compositores</title>
        <link rel="stylesheet" href="/w3.css"/>
		<link rel="stylesheet" href="/custom.css"/>
    </head>
    <body>
        <div class="w3-card-4">

            <header class="w3-container w3-teal">
              <h1>Lista de compositores</h1>
            </header>
            
            <div class="w3-container">
				<ul class="w3-ul">`
	compositores.forEach( compositor => {
		pagHTML += `
						<li>
							<a href="${"compositores/" + compositor.id}">
								<p>${compositor.nome}</p>
							</a>
						</li>`
	});
				
    pagHTML += `
				</ul>
					<a href="compositores/create">
						<button type="button" class="w3-button w3-purple botao-submit">
							+
						</button>
					</a>
				</form>
            </div>
            
            <footer class="w3-container w3-teal">
              <h5>Generated by EngWeb2024::TPC4</h5>
            </footer>
            
        </div>
    </body>
</html>`
    return pagHTML
}

function listCompositores(periodo) {
	html = ""
	periodo.compositores.forEach( compositor => {
		html += `
								<li>
									<a href="/compositores/${compositor.comp_id}">${compositor.comp_nome}</a>
								</li>`
	})

	return html
}

function periodosIndex(periodos) {
    pagHTML = `
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8"/>
        <title>Lista de periodos</title>
        <link rel="stylesheet" href="/w3.css"/>
		<link rel="stylesheet" href="/custom.css"/>
    </head>
    <body>
        <div class="w3-card-4">

            <header class="w3-container w3-teal">
              <h1>Lista de periodos</h1>
            </header>
            
            <div class="w3-container">
				<ul class="w3-ul">`
	
	periodos.forEach( periodo => {
		pagHTML += `
			<a href="${"periodos/" + periodo.id}">
				<p>${periodo.nome}</p>
			</a>`
	});
	pagHTML += `
				</ul>
            </div>

			<a href="periodos/create">
				<button type="button" class="w3-button w3-purple botao-submit">
					+
				</button>
			</a>

            <footer class="w3-container w3-teal">
              <h5>Generated by EngWeb2024::TPC4</h5>
            </footer>
            
        </div>
    </body>
</html>`
    return pagHTML

}

function detalhesComp(compositor) {
	pagHTML = `
	<!DOCTYPE html>
	<html>
		<head>
			<meta charset="utf-8"/>
			<title>Lista de compositores: ${compositor.nome}</title>
			<link rel="stylesheet" href="/w3.css"/>
			<link rel="stylesheet" href="/custom.css"/>
		</head>
		<body>
			<div class="w3-card-4">
	
				<header class="w3-container w3-teal">
				  <h1>Lista de compositores: ${compositor.nome}</h1>
				</header>
				
				<div class="w3-container">
					<p>Nome: ${compositor.nome}</p>
					<p>Bio: ${compositor.bio}</p>
					<p>Data de nascimento: ${compositor.dataNasc}</p>
					<p>Data de obito: ${compositor.dataObito}</p>
					<a href="${"/periodos/" + compositor.periodo.id}">
						<p>Periodo: ${compositor.periodo.nome}</p>
					</a>
				</div>

				<a href="/compositores/${compositor.id}/delete">
					<button type="button" class="w3-button w3-purple botao-submit">
						üóë
					</button>
				</a>
				<a href="/compositores/${compositor.id}/edit">
					<button type="button" class="w3-button w3-purple botao-submit-2">
						‚úé
					</button>
				</a>
				
				<footer class="w3-container w3-teal">
				  <h5>Generated by EngWeb2024::TPC4</h5>
				</footer>
				
			</div>
		</body>
	</html>`
	return pagHTML
}

function detalhesPer(periodo) {
    pagHTML = `
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8"/>
        <title>Lista de periodos: ${periodo.nome}</title>
        <link rel="stylesheet" href="/w3.css"/>
		<link rel="stylesheet" href="/custom.css"/>
    </head>
    <body>
        <div class="w3-card-4">

            <header class="w3-container w3-teal">
              <h1>Lista de periodos: ${periodo.nome}</h1>
            </header>
            
            <div class="w3-container">
				<a href="${"periodos/" + periodo.id}">
					<p>Nome: ${periodo.nome}</p>
					<p>Compositores:</p>
					<ul class="w3-ul">
						${listCompositores(periodo)}
					</ul>
				</a>
            </div>

			<a href="/periodos/${periodo.id}/delete">
				<button type="button" class="w3-button w3-purple botao-submit">
					üóë
				</button>
			</a>
			<a href="/periodos/${periodo.id}/edit">
				<button type="button" class="w3-button w3-purple botao-submit-2">
					‚úé
				</button>
			</a>
            
            <footer class="w3-container w3-teal">
              <h5>Generated by EngWeb2024::TPC4</h5>
            </footer>
            
        </div>
    </body>
</html>`
    return pagHTML
}

function editPer(periodo) {
    pagHTML = `
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8"/>
        <title>Editar periodo: ${periodo.id}</title>
        <link rel="stylesheet" href="/w3.css"/>
		<link rel="stylesheet" href="/custom.css"/>
    </head>
    <body>
        <div class="w3-card-4">

            <header class="w3-container w3-teal">
              <h1>Editar periodo: ${periodo.id}</h1>
            </header>
            
            <form method="post" action="/periodos/edit" class="w3-container w3-card-4">
				<br>
				<p>
					<label class="w3-text-grey">Nome</label>
					<input class="w3-input w3-border" type="text" required name="nome" value=${periodo.nome}>
				</p>
				<p>
					<label class="w3-text-grey">Id</label>
					<input class="w3-input w3-border" type="text" readonly name="id" value="${periodo.id}">
				</p>
				<p>
					<button type="submit" class="w3-btn w3-padding w3-teal" style="width:120px">Send &nbsp; ‚ùØ</button>
				</p>
			</form>
            
            <footer class="w3-container w3-teal">
              <h5>Generated by EngWeb2024::TPC4</h5>
            </footer>
            
        </div>
    </body>
</html>`
    return pagHTML

}

function editComp(compositor) {
    pagHTML = `
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8"/>
        <title>Editar compositor: ${compositor.id}</title>
        <link rel="stylesheet" href="/w3.css"/>
		<link rel="stylesheet" href="/custom.css"/>
    </head>
    <body>
        <div class="w3-card-4">

            <header class="w3-container w3-teal">
              <h1>Editar compositor: ${compositor.id}</h1>
            </header>
            
            <form method="post" action="/compositores/edit" class="w3-container w3-card-4">
				<br>
				<p>
					<label class="w3-text-grey">Nome</label>
					<input class="w3-input w3-border" type="text" required name="nome" value="${compositor.nome}">
				</p>
				<p>
					<label class="w3-text-grey">Id</label>
					<input class="w3-input w3-border" type="text" readonly name="id" value="${compositor.id}">
				</p>
				<p>
					<label class="w3-text-grey">Bio</label>
					<textarea class="w3-input w3-border" name="message" rows="4" cols="50" required name="bio" value="${compositor.bio}"></textarea>
				</p>
				<p>
					<label class="w3-text-grey">Data de nascimento</label>
					<br>
					<input class="w3-border" type="date" required name="dataNasc" value="${compositor.dataNasc}">
				</p>
				<p>
					<label class="w3-text-grey">Data de obito</label>
					<br>
					<input class="w3-border" type="date" required name="dataObito" value="${compositor.dataObito}">
				</p>
				<p>
					<label class="w3-text-grey">ID do periodo</label>
					<input class="w3-input w3-border" type="number" required name="periodo" value="${compositor.periodo.id}">
				</p>

				<p>
					<button type="submit" class="w3-btn w3-padding w3-teal" style="width:120px">Send &nbsp; ‚ùØ</button>
				</p>

			</form>
            
            <footer class="w3-container w3-teal">
              <h5>Generated by EngWeb2024::TPC4</h5>
            </footer>
            
        </div>
    </body>
</html>`
    return pagHTML
}


http.createServer(function (req, res) {
    var q = url.parse( req.url, true)

	const comp_re = /^\/compositores\/C[0-9]+$/
	const comp_lookup_re = /^\?periodo=[0-9]+$/
	const per_re = /^\/periodos\/[0-9]+$/
	const comp_delete_re = /^\/compositores\/C[0-9]+\/delete$/
	const comp_edit_re = /^\/compositores\/C[0-9]+\/edit$/
	const per_delete_re = /^\/periodos\/[0-9]+\/delete$/
	const per_edit_re = /^\/periodos\/[0-9]+\/edit$/

	switch (req.method) {
		case "GET":
			if (q.pathname == '/compositores') {
				if (comp_lookup_re.test(q.search)) {
					let id = q.search.substring(9)
					axios.get('http://localhost:3000/compositores?periodo.id=' + id)
					.then( (resp) => {
						dados = resp.data
						pagHTML = compositoresIndex(dados)
						res.writeHead(200, {'Content-Type': 'text/html'})
						res.write(pagHTML)
						res.end()
					})
					.catch((erro) => {
						res.writeHead(500, {'Content-Type': 'text/html'})
						res.write("<pre>Erro: " + erro + "</pre>")
						res.end()
					})
				} else {
					axios.get('http://localhost:3000/compositores')
						.then( (resp) => {
							dados = resp.data
							pagHTML = compositoresIndex(dados)
							res.writeHead(200, {'Content-Type': 'text/html'})
							res.write(pagHTML)
							res.end()
						})
						.catch((erro) => {
							res.writeHead(500, {'Content-Type': 'text/html'})
							res.write("<pre>Erro: " + erro + "</pre>")
							res.end()
						})
				}
			} else if (q.pathname == "/compositores/create") {
				pagHTML = compositoresCreate()
				res.writeHead(200, {'Content-Type': 'text/html'})
				res.write(pagHTML)
				res.end()
			} else if (q.pathname == "/periodos/create") {
				pagHTML = periodosCreate()
				res.writeHead(200, {'Content-Type': 'text/html'})
				res.write(pagHTML)
				res.end()
			} else if (q.pathname == "/periodos") {
				axios.get('http://localhost:3000/periodos')
				.then( (resp) => {
					dados = resp.data
					pagHTML = periodosIndex(dados)
					res.writeHead(200, {'Content-Type': 'text/html'})
					res.write(pagHTML)
					res.end()
				})
				.catch((erro) => {
					res.writeHead(500, {'Content-Type': 'text/html'})
					res.write("<pre>Erro: " + erro + "</pre>")
					res.end()
				})
			} else if (comp_re.test(q.pathname)) {
				id = q.pathname.substring(14)
				axios.get('http://localhost:3000/compositores?id=' + id)
				.then( (resp) => {
					dados = resp.data
					pagHTML = detalhesComp(dados[0]) /////////////////////////////////// falta error checking, pode nao existir
					res.writeHead(200, {'Content-Type': 'text/html'})
					res.write(pagHTML)
					res.end()
				})
				.catch((erro) => {
					res.writeHead(500, {'Content-Type': 'text/html'})
					res.write("<pre>Erro: " + erro + "</pre>")
					res.end()
				})
			
			} else if (per_re.test(q.pathname)) {
				id = q.pathname.substring(10)
				axios.get('http://localhost:3000/periodos?id=' + id)
				.then( (resp) => {
					dados = resp.data
					pagHTML = detalhesPer(dados[0]) /////////////////////////////////// falta error checking, pode nao existir
					res.writeHead(200, {'Content-Type': 'text/html'})
					res.write(pagHTML)
					res.end()
				})
				.catch((erro) => {
					res.writeHead(500, {'Content-Type': 'text/html'})
					res.write("<pre>Erro: " + erro + "</pre>")
					res.end()
				})

			} else if (comp_delete_re.test(req.url)) {
				let pieces = req.url.split('/')
				let comp = pieces[pieces.length - 2]

				axios.delete('http://localhost:3000/compositores/' + comp)
				.then( resp => {
					res.writeHead(200, {'Content-Type' : 'text/html'})
					res.write("<p>Dados apagados: " + JSON.stringify(comp, null, 4) + "</p>") // este 4 nao esta a fazer nada wtf
					res.end()
				})
				.catch( erro => {
					res.writeHead(521, {'Content-Type' : 'text/html'})
					res.write("<pre>Erro: " + erro + "</pre>")
					res.end()
				})
			} else if (per_delete_re.test(req.url)) {
				let pieces = req.url.split('/')
				let per = pieces[pieces.length - 2]
				axios.delete('http://localhost:3000/periodos/' + per)
				.then( resp => {
					res.writeHead(200, {'Content-Type' : 'text/html'})
					res.write("<p>Dados apagados: " + JSON.stringify(per, null, 4) + "</p>") // este 4 nao esta a fazer nada wtf
					res.end()
				})
				.catch( erro => {
					console.log("erro " + erro)
					res.writeHead(521, {'Content-Type' : 'text/html'})
					res.write("<pre>Erro: " + erro + "</pre>")
					res.end()
				})
			} else if (comp_edit_re.test(req.url)) {
					let pieces = req.url.split('/')
					let comp_id = pieces[pieces.length - 2]
	
					axios.get('http://localhost:3000/compositores?id=' + comp_id)
					.then( (resp) => {
						let dados = resp.data
						let comp = dados[0] /////////////////////////////////// falta error checking, pode nao existir
						let pagHTML = editComp(comp)
						res.writeHead(200, {'Content-Type': 'text/html'})
						res.write(pagHTML)
						res.end()
					})
					.catch((erro) => {
						res.writeHead(500, {'Content-Type': 'text/html'})
						res.write("<pre>Erro: " + erro + "</pre>")
						res.end()
					})
			} else if (per_edit_re.test(req.url)) {
				let pieces = req.url.split('/')
				let per_id = pieces[pieces.length - 2]

				axios.get('http://localhost:3000/periodos?id=' + per_id)
				.then( (resp) => {
					let dados = resp.data
					let periodo = dados[0] /////////////////////////////////// falta error checking, pode nao existir
					let pagHTML = editPer(periodo)
					res.writeHead(200, {'Content-Type': 'text/html'})
					res.write(pagHTML)
					res.end()
				})
				.catch((erro) => {
					res.writeHead(500, {'Content-Type': 'text/html'})
					res.write("<pre>Erro: " + erro + "</pre>")
					res.end()
				})
			} else if(q.pathname == '/w3.css'){
				fs.readFile('w3.css', (erro, dados) => {
					res.writeHead(200, {'Content-Type': 'text/css'})
					res.write(dados)
					res.end()
				})
			} else if(q.pathname == '/custom.css'){
				fs.readFile('custom.css', (erro, dados) => {
					res.writeHead(200, {'Content-Type': 'text/css'})
					res.write(dados)
					res.end()
				})
			} else {
				res.writeHead(400, {'Content-Type': 'text/html; charset=utf-8'})
				res.write('<p>Erro: pedido GET n√£o suportado.</p>')
				res.write('<pre>' + q.pathname + '</pre>')
				res.end()
			}
			break
		case "POST":
			if (req.url == '/compositores/create') {
				collectRequestBodyData(req, result => {
					if(result){

						// foi inserido o ID do periodo, temos de ir buscar o nome para o json ficar direito
						axios.get('http://localhost:3000/periodos?id=' + result.periodo)
						.then( resp => {
							let nome_periodo = resp.data[0].nome // falta error checking etc

							let compositor = {
								// tive preguica de calcular automaticamente o id porque tem um C manhoso no inicio logo meti a ser inserido no form
								id: result.id,
								nome: result.nome,
								bio: result.bio,
								dataNasc: result.dataNasc,
								dataObito: result.dataObito,
								periodo: {
									nome: nome_periodo,
									id: result.periodo
								}
							}

							axios.post('http://localhost:3000/compositores', compositor)
							.then( resp => {
								res.writeHead(201, {'Content-Type' : 'text/html'})
								res.write("<p>Dados inseridos: " + JSON.stringify(compositor, null, 4) + "</p>") // este 4 nao esta a fazer nada wtf
								res.end()
							})
							.catch( erro => {
								res.writeHead(520, {'Content-Type' : 'text/html'})
								res.write("<pre>Erro: " + erro + "</pre>")
								res.end()
							})


						}).catch((erro) => {
							res.writeHead(500, {'Content-Type': 'text/html'})
							res.write("<pre>Erro: " + erro + "</pre>")
							res.end()
						})

					} else {
						res.writeHead(404, {'Content-Type' : 'text/html'})
						res.write("Erro nos dados do form")
						res.end()
					}
					// console.log("a inserir: " + result)
				})
			} else if (req.url == '/periodos/create') {
					collectRequestBodyData(req, result => {
						if(result) {
							let periodo = {
								// tive preguica de calcular automaticamente o id porque tem um C manhoso no inicio logo meti a ser inserido no form
								id: result.id,
								nome: result.nome,
								compositores: []
							}

							axios.post('http://localhost:3000/periodos', periodo)
							.then( resp => {
								res.writeHead(201, {'Content-Type' : 'text/html'})
								res.write("<p>Dados inseridos: " + JSON.stringify(periodo, null, 4) + "</p>") // este 4 nao esta a fazer nada wtf
								res.end()
							})
							.catch( erro => {
								res.writeHead(520, {'Content-Type' : 'text/html'})
								res.write("<pre>Erro: " + erro + "</pre>")
								res.end()
							})
						} else {
							res.writeHead(404, {'Content-Type' : 'text/html'})
							res.write("Erro nos dados do form")
							res.end()
						}
					})
			} else if (req.url == '/periodos/edit') {
				collectRequestBodyData(req, result => {
					if(result) {

						// obviamente os compositores nao vao no form, tenho de ir buscar ao json-server
						axios.get('http://localhost:3000/periodos?id=' + result.id)
						.then( (resp) => {
							dados = resp.data
							periodo_original = dados[0] // falta error checking
							let periodo = {
								// tive preguica de calcular automaticamente o id porque tem um C manhoso no inicio logo meti a ser inserido no form
								id: result.id,
								nome: result.nome,
								compositores: periodo_original.compositores
							}

							axios.put('http://localhost:3000/periodos/' + periodo.id, periodo)
							.then( resp => {
								res.writeHead(201, {'Content-Type' : 'text/html'})
								res.write("<p>Dados alterados: " + JSON.stringify(periodo, null, 4) + "</p>") // este 4 nao esta a fazer nada wtf
								res.end()
							})
							.catch( erro => {
								console.log("erro aqui: " + erro)
								res.writeHead(520, {'Content-Type' : 'text/html'})
								res.write("<pre>Erro: " + erro + "</pre>")
								res.end()
							})
						})
						.catch((erro) => {
							res.writeHead(500, {'Content-Type': 'text/html'})
							res.write("<pre>Erro: " + erro + "</pre>")
							res.end()
						})
					} else {
						res.writeHead(404, {'Content-Type' : 'text/html'})
						res.write("Erro nos dados do form")
						res.end()
					}
				})
			} else if (req.url == '/compositores/edit') {
				collectRequestBodyData(req, result => {
					if(result) {

						// nome do periodo nao vai no form, tenho de ir ao json server (se calhar nao era preciso mas so por seguranca)
						axios.get('http://localhost:3000/periodos?id=' + result.periodo)
						.then( (resp) => {
							dados = resp.data
							periodo = dados[0] // falta error checking

							let compositor = {
								id: result.id,
								nome: result.nome,
								dataNasc: result.dataNasc,
								dataObito: result.dataObito,
								periodo: {
									id: periodo.id,
									nome: periodo.nome
								}
							}

							axios.put('http://localhost:3000/compositores/' + compositor.id, compositor)
							.then( resp => {
								res.writeHead(201, {'Content-Type' : 'text/html'})
								res.write("<p>Dados alterados: " + JSON.stringify(compositor, null, 4) + "</p>") // este 4 nao esta a fazer nada wtf
								res.end()
							})
							.catch( erro => {
								console.log("erro aqui: " + erro)
								res.writeHead(520, {'Content-Type' : 'text/html'})
								res.write("<pre>Erro: " + erro + "</pre>")
								res.end()
							})
						})
						.catch((erro) => {
							res.writeHead(500, {'Content-Type': 'text/html'})
							res.write("<pre>Erro: " + erro + "</pre>")
							res.end()
						})
					} else {
						res.writeHead(404, {'Content-Type' : 'text/html'})
						res.write("Erro nos dados do form")
						res.end()
					}
				})
			} else {
				res.writeHead(404, {'Content-Type': 'text/html; charset=utf-8'})
				res.write('<p>Erro: pedido POST n√£o suportado.</p>')
				res.write('<pre>' + q.pathname + '</pre>')
				res.end()
			}
			break
		default:
			console.log("Got method " + req.method + ", ignoring")
	}

    console.log(q.pathname)
}).listen(7777)
